// Objective-C API for talking to github.com/DimensionDev/gopenpgp/helper Go package.
//   gobind -lang=objc github.com/DimensionDev/gopenpgp/helper
//
// File is generated by gobind. Do not edit.

#ifndef __Helper_H__
#define __Helper_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Crypto.objc.h"
#include "Constants.objc.h"

@class HelperEncryptedSignAttachment;

@interface HelperEncryptedSignAttachment : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable keyPacket;
@property (nonatomic) NSData* _Nullable dataPacket;
@property (nonatomic) NSData* _Nullable signature;
@end

/**
 * DecryptMessageArmored decrypts an armored PGP message given a private key and its passphrase
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperDecryptMessageArmored(CryptoKeyRing* _Nullable privateKeyRing, NSString* _Nullable passphrase, NSString* _Nullable ciphertext, NSError* _Nullable* _Nullable error);

/**
 * DecryptMessageWithToken decrypts an armored message with a random token.
The algorithm is derived from the armoring.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperDecryptMessageWithToken(NSString* _Nullable token, NSString* _Nullable ciphertext, NSError* _Nullable* _Nullable error);

/**
 * DecryptVerifyAttachment decrypts and verifies an attachment split into the keyPacket, dataPacket
and an armored (!) signature, given a publicKey, and a privateKey with its passphrase.
Returns the plain data or an error on signature verification failure.
 */
FOUNDATION_EXPORT NSData* _Nullable HelperDecryptVerifyAttachment(CryptoKeyRing* _Nullable publicKeyRing, CryptoKeyRing* _Nullable privateKeyRing, NSString* _Nullable passphrase, NSData* _Nullable keyPacket, NSData* _Nullable dataPacket, NSString* _Nullable armoredSignature, NSError* _Nullable* _Nullable error);

/**
 * DecryptVerifyMessageArmored decrypts an armored PGP message given a private key and its passphrase
and verifies the embedded signature.
Returns the plain data or an error on signature verification failure.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperDecryptVerifyMessageArmored(CryptoKeyRing* _Nullable publicKeyRing, CryptoKeyRing* _Nullable privateKeyRing, NSString* _Nullable passphrase, NSString* _Nullable ciphertext, NSError* _Nullable* _Nullable error);

/**
 * EncryptMessageArmored generates an armored PGP message given a plaintext and an armored public key
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptMessageArmored(CryptoKeyRing* _Nullable publicKeyRing, NSString* _Nullable plaintext, NSError* _Nullable* _Nullable error);

/**
 * EncryptMessageWithToken encrypts a string with a passphrase using AES256
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptMessageWithToken(NSString* _Nullable passphrase, NSString* _Nullable plaintext, NSError* _Nullable* _Nullable error);

/**
 * EncryptMessageWithTokenAlgo encrypts a string with a random token and an algorithm chosen from constants.*
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptMessageWithTokenAlgo(NSString* _Nullable token, NSString* _Nullable plaintext, NSString* _Nullable algo, NSError* _Nullable* _Nullable error);

/**
 * EncryptSignAttachment encrypts an attachment using a detached signature, given a publicKey, a privateKey
and its passphrase, the filename, and the unencrypted file data.
Returns keypacket, dataPacket and unarmored (!) signature separate.
 */
FOUNDATION_EXPORT HelperEncryptedSignAttachment* _Nullable HelperEncryptSignAttachment(CryptoKeyRing* _Nullable publicKeyRing, CryptoKeyRing* _Nullable privateKeyRing, NSString* _Nullable passphrase, NSString* _Nullable fileName, NSData* _Nullable plainData, NSError* _Nullable* _Nullable error);

/**
 * EncryptSignMessageArmored generates an armored signed PGP message given a plaintext and an armored public key
a private key and its passphrase
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptSignMessageArmored(CryptoKeyRing* _Nullable publicKeyRing, CryptoKeyRing* _Nullable privateKeyRing, NSString* _Nullable passphrase, NSString* _Nullable plaintext, NSError* _Nullable* _Nullable error);

/**
 * SignCleartextMessage signs text given a private keyring, canonicalizes and trims the newlines,
and returns the PGP-compliant special armoring
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperSignCleartextMessage(CryptoKeyRing* _Nullable keyRing, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

/**
 * SignCleartextMessageArmored signs text given a private key and its passphrase, canonicalizes and trims the newlines,
and returns the PGP-compliant special armoring
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperSignCleartextMessageArmored(CryptoKeyRing* _Nullable privateKeyRing, NSString* _Nullable passphrase, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

/**
 * VerifyCleartextMessage verifies PGP-compliant armored signed plain text given the public keyring
and returns the text or err if the verification fails
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperVerifyCleartextMessage(CryptoKeyRing* _Nullable keyRing, NSString* _Nullable armored, int64_t verifyTime, NSError* _Nullable* _Nullable error);

#endif
